
import Apollo
import Foundation

extension Org.Network {
  /// Apollo GraphQL Network Client.
  ///
  /// This class is responsible for network communication with GraphQL backend,
  /// and data retrieve with fetch comand.
  ///
  /// More feature will be added.
  class Client {
    static let shared = Client()

    private(set) lazy var apollo =  ApolloClient(url: URL(string: "https://countries.trevorblades.com/graphql")!)
    
    /// Fetch data required by the GraphQLQuery.
    ///
    /// This functon is Away/Async function that return only
    ///
    /// - Parameters:
    ///   - query: The GraphQLQuery concrete type.
    /// - Returns: An InitializableWithGraphQLResult model.
    /// - Throws: `Error` generated by Apollo fetch api.
    static func fetch<Query: GraphQLQuery, Model: InitializableWithGraphQLResult>(query: Query) async throws -> Model where Model.Data == Query.Data {
      return try await withCheckedThrowingContinuation { continuation in
        Client.shared.apollo.fetch(query: query) { result in
          switch result {
          case .success(let graphQLResult):
            if let model = Model(result: graphQLResult) {
              continuation.resume(returning: model)
            }
          case .failure(let error):
            continuation.resume(throwing: error)
          }
        }
      }
    }
  }

}
